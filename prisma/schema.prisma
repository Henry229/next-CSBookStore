// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[] @relation("CategoryToProduct")
  
}

model Item {
  id        String   @id @default(uuid())
  title     String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id        String   @id @default(uuid())
  title     String
  value     String
  products    Product[] // Relation to Product model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  title       String
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  price       Float
  description String
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  itemId      String
  item        Item        @relation(fields: [itemId], references: [id])
  subjectId   String
  subject     Subject     @relation(fields: [subjectId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([itemId])
  @@index([subjectId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Order {
  id        String    @id @default(uuid())
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

